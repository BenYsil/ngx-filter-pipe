{"version":3,"file":"ng2-filter.pipe.spec.js","sourceRoot":"","sources":["ng2-filter.pipe.spec.ts"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable:no-unused-variable */\n\nimport { Ng2FilterPipe } from './ng2-filter.pipe';\n\ndescribe('Pipe: Ng2FilterPipe', () => {\n  let pipe: Ng2FilterPipe;\n\n  beforeEach(() => {\n    pipe = new Ng2FilterPipe();\n  });\n\n  it('create an instance', () => {\n    expect(pipe).toBeTruthy();\n  });\n\n  it('filters array of strings', () => {\n    expect(pipe.transform(['a', 'b', 'c'], 'a')).toEqual(['a']);\n  });\n\n  it('filters array of strings without any match', () => {\n    expect(pipe.transform(['a', 'b', 'c'], 'x')).toEqual([]);\n  });\n\n  it('filters array of strings with repeated element', () => {\n    let arrayContainingA = ['a', 'ba', 'ca'];\n    expect(pipe.transform(arrayContainingA, 'a')).toEqual(arrayContainingA);\n  });\n\n  it('filters array of numbers', () => {\n    expect(pipe.transform([1, 2, 3, 11], 1)).toEqual([1]);\n  });\n\n  it('filters array of objects', () => {\n    expect(pipe.transform([\n      { value: 1 },\n      { value: 2 },\n      { value: 3 },\n      { value: 111 }\n    ], { value: 1 })).toEqual([{ value: 1 }]);\n\n    expect(pipe.transform([\n      { value: 'a' },\n      { value: 'b' },\n      { value: 'c' },\n      { value: 'abc' }\n    ], { value: 'a' })).toEqual([{ value: 'a' }, { value: 'abc' }]);\n  });\n\n  it('filters array of objects with nested objects', () => {\n    expect(pipe.transform([\n      { value: 'a', nested: { number: 1 } },\n      { value: 'b', nested: { number: 2 } },\n      { value: 'c', nested: { number: 1 } },\n      { value: 'abc', nested: { number: 2 } }\n    ], { value: 'a', nested: { number: 2 } }))\n      .toEqual([{ value: 'abc', nested: { number: 2 } }]);\n  });\n\n  it('filters array of objects with nested objects (not every object has nested object)', () => {\n    expect(pipe.transform([\n      { value: 'a' },\n      { value: 'b', nested: { number: 1 } },\n      { value: 'c', nested: { number: 1 } },\n      { value: 'abc' }\n    ], { value: 'a', nested: { number: 1 } }))\n      .toEqual([]);\n  });\n\n  it('filters array of objects with empty array', () => {\n    const objects = [\n      {\n        value: 'a'\n      }\n    ];\n    expect(pipe.transform(objects, [])).toEqual(objects);\n  });\n\n  it('should filter by using $or operator', () => {\n    const objects = [\n      {\n        valueA: 1,\n        valueB: 2\n      }\n    ];\n\n    expect(pipe.transform(objects, { $or: [{ valueA: 1 }, { valueB: 2 }] })).toEqual(objects);\n  });\n});\n"]}